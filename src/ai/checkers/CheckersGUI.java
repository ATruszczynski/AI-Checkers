package ai.checkers;

import java.awt.AWTEvent;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.*;

/**
 * 
 *
 * @since 2018-12-12, 14:37:57
 * @author Aleksander Truszczy≈Ñski
 */
public class CheckersGUI extends javax.swing.JFrame {
    static int controlOffset = 15;
    static Dimension buttonDim = new Dimension(80,20);
    Game game;
    
    
    /** Creates new form CheckersGUI */
    public CheckersGUI() {
        initComponents();
        getThisFukenWindowToLookAsIWant();
        game = new Game(this);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boardPanel = new BoardPanel();
        menuPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        difficultySlider = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 800));
        setPreferredSize(new java.awt.Dimension(1200, 800));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        boardPanel.setBackground(new java.awt.Color(255, 255, 153));
        boardPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        boardPanel.setMinimumSize(new java.awt.Dimension(800, 800));
        boardPanel.setPreferredSize(new java.awt.Dimension(800, 800));

        javax.swing.GroupLayout boardPanelLayout = new javax.swing.GroupLayout(boardPanel);
        boardPanel.setLayout(boardPanelLayout);
        boardPanelLayout.setHorizontalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 796, Short.MAX_VALUE)
        );
        boardPanelLayout.setVerticalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 796, Short.MAX_VALUE)
        );

        getContentPane().add(boardPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        menuPanel.setBackground(new java.awt.Color(0, 255, 255));

        startButton.setText("Start");
        startButton.setMaximumSize(new java.awt.Dimension(60, 25));
        startButton.setMinimumSize(new java.awt.Dimension(60, 25));
        startButton.setPreferredSize(new java.awt.Dimension(60, 25));

        resetButton.setText("Reset");
        resetButton.setMaximumSize(new java.awt.Dimension(60, 25));
        resetButton.setMinimumSize(new java.awt.Dimension(60, 25));

        difficultySlider.setMajorTickSpacing(1);
        difficultySlider.setPaintTicks(true);
        difficultySlider.setMaximum(7);
        difficultySlider.setMinimum(1);
        difficultySlider.setPaintLabels(true);
        difficultySlider.setPaintTicks(true);
        difficultySlider.setValue(1);

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(menuPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(menuPanelLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(difficultySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addComponent(difficultySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(655, Short.MAX_VALUE))
        );

        getContentPane().add(menuPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 0, 400, 800));

        setSize(new java.awt.Dimension(1219, 842));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void getThisFukenWindowToLookAsIWant()
    {
        this.setResizable(false);
        this.setSize(new Dimension(1200, 830));
        Dimension d = new Dimension(800,800);
        boardPanel.setSize(d);
        
//        difficultySlider.setPaintTicks(rootPaneCheckingEnabled);
//        difficultySlider.setMajorTickSpacing(1);
        
//        startButton.setLocation(new Point(30,80000));
//        startButton.setSize(buttonDim);
        
        int i = 0;
        repaint();
    }
    
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        int x = evt.getX();
        int y = evt.getY();
        int i = 0;
    }//GEN-LAST:event_formMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckersGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckersGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckersGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckersGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckersGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardPanel;
    private javax.swing.JSlider difficultySlider;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables

    public int GetBoardPanelWidth()
    {
        return this.getWidth();
    }
    
    public int GetBoardPanelHeight()
    {
        return this.getHeight();
    }
    
    class BoardPanel extends JPanel
    {
        Color blacks = new Color(100,60,24);
        Color whites = new Color(220,200,140);
        Color chosen = new Color(77, 219, 255);
        Color line = Color.RED;
        float lineThiccness = 2;
        int linePointRadius = 10;
        final static int pieceDiameter = 80;
        final static int moveAvailableDiam = 90;
        
        public BoardPanel()
        {
            super();
        }
        
        @Override
        public void paintComponent(Graphics g)
        {
            //setSize(new Dimension(800,800));
            DrawBoard(g);
            DrawMoveFields(game.validMoves, g);
            DrawMoveAvailablePieces(game.adviceMoves,g);
            DrawPieces(g);
            DrawMoveLines(game.validMoves, g);
        }
        
        private void DrawBoard(Graphics g)
        {
            int w = getWidth();
            int h = getHeight();
            int fieldW = w/8;
            int fieldH = h/8;
            
            for(int x = 0; x < 8; x++)
            {
                for(int y = 0; y < 8; y++)
                {
                    boolean xx = x%2 == 0;
                    boolean yy = y%2 == 0;
                    
                    if(xx == yy)
                    {
                        DrawField(x,y,Color.WHITE,g);
                    }
                    else
                    {
                        DrawField(x,y,Color.BLACK,g);
                    }
                    g.fillRect(x*fieldW, y*fieldH, fieldW, fieldH);
                }
            }
        }
        private void DrawPieces(Graphics g)
        {
            LinkedList<PiecePosition> pointPieces = game.gs.GetPiecesList();
            int w = getWidth();
            int h = getHeight();
            int fieldW = w/8;
            int fieldH = h/8;
            for(PiecePosition point: pointPieces)
            {
                Piece piece = game.gs.board[point.x][point.y];
                if(piece.colour == Piece.Colour.White)
                    g.setColor(whites);
                else
                    g.setColor(blacks);
                int x = point.x * fieldW + (fieldW-pieceDiameter)/2;
                int y = point.y * fieldH + (fieldH-pieceDiameter)/2;
                g.fillOval(x, y, pieceDiameter, pieceDiameter);
                if(piece.type == Piece.Type.Dame)
                {
                    int dameDiameter = (int) (pieceDiameter*0.75);
                    x = point.x * fieldW + (fieldW-dameDiameter)/2;
                    y = point.y * fieldH + (fieldH-dameDiameter)/2;
                    g.setColor(Color.BLACK);
                    g.drawOval(x, y, dameDiameter, dameDiameter);
                }
            }
        }
        private void DrawField(int x, int y, Color c, Graphics g)
        {
            int w = getWidth();
            int h = getHeight();
            int fieldW = w / 8;
            int fieldH = h / 8;
            
            g.setColor(c);
            g.fillRect(x * fieldW, y * fieldH, fieldW, fieldH);
                
        }
        private void DrawLine(int x1, int y1, int x2, int y2, Color c, Graphics g)
        {
            int w = getWidth();
            int h = getHeight();
            int fieldW = w / 8;
            int fieldH = h / 8;
            
            g.setColor(c);
            ((Graphics2D)g).setStroke(new BasicStroke(lineThiccness));
            g.drawLine(x1*fieldW + fieldW/2, y1*fieldH + fieldH/2, x2*fieldW  + fieldW/2, y2*fieldH + fieldH/2);
            ((Graphics2D)g).setStroke(new BasicStroke(1));
        }
        private void DrawMoveFields(LinkedList<Move> avMoves, Graphics g)
        {
            for(Move m: avMoves)
            {
                int xb = m.steps.get(0).x;
                int yb = m.steps.get(0).y;
                int xe = m.steps.getLast().x;
                int ye = m.steps.getLast().y;
                
                DrawField(xb,yb,chosen,g);
                DrawField(xe,ye,chosen,g);
                
                
            }
        }
        private void DrawDot(int x, int y, Color c, Graphics g)
        {
            int w = getWidth();
            int h = getHeight();
            int fieldW = w / 8;
            int fieldH = h / 8;
            
            int xp = x * fieldW + (fieldW-linePointRadius)/2;
            int yp = y * fieldH + (fieldH-linePointRadius)/2;
            
            g.setColor(c);
            g.fillOval(xp, yp, linePointRadius, linePointRadius);
        }
        private void DrawMoveLines(LinkedList<Move> avMoves, Graphics g)
        {
            for(Move m: avMoves)
            {
                for (int i = 0; i < m.steps.size() - 1; i++) 
                {
                    PiecePosition p1 = m.steps.get(i);
                    PiecePosition p2 = m.steps.get(i + 1);
                    
                    DrawDot(p1.x, p1.y, line, g);
                    DrawLine(p1.x, p1.y, p2.x, p2.y, line, g);
                    DrawDot(p2.x, p2.y, line, g);
                }
            }
        }
        private void DrawMoveAvailablePieces(LinkedList<PiecePosition> piecesWithMove, Graphics g)
        {
            int w = getWidth();
            int h = getHeight();
            int fieldW = w/8;
            int fieldH = h/8;
            g.setColor(chosen);
            for(PiecePosition p: piecesWithMove)
            {
                int x = p.x * fieldW + (fieldW-moveAvailableDiam)/2;
                int y = p.y * fieldH + (fieldH-moveAvailableDiam)/2;
                g.fillOval(x, y, moveAvailableDiam, moveAvailableDiam);
            }
        }
    }
    
}
